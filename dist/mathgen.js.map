{"version":3,"sources":["../mathgen.js"],"names":["Array","prototype","remove","element","i","length","splice","removeIndex","index","ts","Typeson","register","Operator","Addition","Subtraction","Multiplication","Division","RandRange","RandRangeAdv","OperatorGen","Generator","Expression","x","expr","source","Rule","rule","generator","hist","app","Vue","el","data","methods","addOperator","operator","operators","push","generate","results","$Notice","open","title","desc","toString","replace","save","json","stringify","$copyText","load","$root","$data","parse","showLoadModal","$Modal","confirm","render","h","props","value","autofocus","placeholder","type","autosize","on","input","val","width","scrollable","onOk","removeDecimal","str","substr","indexOf","print","printJS","printable","css","firstHalf","list","slice","Math","floor","lastHalf"],"mappings":"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","file":"mathgen.js","sourcesContent":["Array.prototype.remove = function(element) {\r\n    for(let i = this.length-1; i--;) {\r\n        if(this[i] === element) this.splice(i, 1);\r\n    }\r\n};\r\nArray.prototype.removeIndex = function(index) {\r\n    this.splice(index, 1);\r\n};\r\n\r\nconst ts = new Typeson().register({\r\n    Operator:Operator,\r\n    Addition:Addition,\r\n    Subtraction:Subtraction,\r\n    Multiplication:Multiplication,\r\n    Division:Division,\r\n    RandRange:RandRange,\r\n    RandRangeAdv:RandRangeAdv,\r\n    OperatorGen:OperatorGen,\r\n    Generator:Generator,\r\n    Expression: [\r\n        x => x instanceof Expression,\r\n        expr => expr.source,\r\n        source => new Expression(source)\r\n    ],\r\n    Rule: [\r\n        x => x instanceof Rule,\r\n        rule => rule.source,\r\n        source => new Rule(source)\r\n    ]\r\n});\r\n\r\nlet generator = new Generator(1, 1, 10);\r\nlet hist = [];\r\n\r\nconst app = new Vue({\r\n    el: '#app',\r\n    data: {\r\n        generator: generator,\r\n        hist: hist\r\n    },\r\n    methods: {\r\n        addOperator: function (operator) {\r\n            generator.operators.push(new OperatorGen(operator, new RandRange(0, 100, 0, 100, false)));\r\n        },\r\n        generate: function () {\r\n            let results = generator.generate();\r\n            this.hist.push(results);\r\n            this.$Notice.open({\r\n                title: '算式',\r\n                desc: results.toString().replace(/,/g, '<br>'),\r\n            });\r\n        },\r\n        save: function () {\r\n            let json = ts.stringify(generator);\r\n            this.$Notice.open({\r\n                title: 'JSON数据 - 已复制到剪贴板',\r\n                desc: json,\r\n            });\r\n            this.$copyText(json);\r\n        },\r\n        load: function (json) {\r\n            generator = this.$root.$data.generator = ts.parse(json);\r\n            this.$Notice.open({\r\n                title: '已加载JSON',\r\n            });\r\n        },\r\n        showLoadModal: function () {\r\n            this.$Modal.confirm({\r\n                render: (h) => {\r\n                    return h('Input', {\r\n                        props: {\r\n                            value: this.value,\r\n                            autofocus: true,\r\n                            placeholder: 'JSON数据',\r\n                            type: 'textarea',\r\n                            autosize: true\r\n                        },\r\n                        on: {\r\n                            input: (val) => {\r\n                                this.value = val;\r\n                            }\r\n                        }\r\n                    })\r\n                },\r\n                width: 800,\r\n                scrollable: true,\r\n                onOk: () => this.load(this.value)\r\n            })\r\n        },\r\n        removeDecimal: str => str.substr(0, str.indexOf('.')),\r\n        print: function (index) {\r\n            printJS({\r\n                printable: 'history' + index.toString(),\r\n                type: 'html',\r\n                css: 'print.css'\r\n            })\r\n        },\r\n        firstHalf: (list) => list.slice(0, Math.floor(list.length / 2)),\r\n        lastHalf: (list) => list.slice(Math.floor(list.length / 2)),\r\n    }\r\n});"]}